networks:
  dspacenet:
    ipam:
      config:
        # Define a custom subnet for our DSpace network, so that we can easily trust requests from host to container.
        # If you customize this value, be sure to customize the 'proxies.trusted.ipranges' env variable below.
        - subnet: "${DSPACE_NETWORK_ID:-172.23.0}.0/16"
services:
  # DSpace (backend) webapp container
  dspace:
    container_name: "${COMPOSE_PROJECT_NAME}_dspace"
    #hostname: "${COMPOSE_PROJECT_NAME}_dspace"
    environment:
      # Below syntax may look odd, but it is how to override dspace.cfg settings via env variables.
      # See https://github.com/DSpace/DSpace/blob/main/dspace/config/config-definition.xml
      # __P__ => "." (e.g. dspace__P__dir => dspace.dir)
      # __D__ => "-" (e.g. google__D__metadata => google-metadata)
      # dspace.dir: Must match with Dockerfile's DSPACE_INSTALL directory.
      dspace__P__dir: /dspace
      # Set sane defaults using environment variables. This allows you to override parts of the URL
      # using these environment vars, or the entire URL by passing in a new value altogether
      dspace__P__server__P__url: http://localhost:8081/server
      dspace__P__ui__P__url: http://localhost:4001
      #dspace__P__server__P__url: "${DSPACE_REST_PROTO:-http}://${DSPACE_REST_HOST:-localhost}:${DSPACE_REST_PORT:-8080}/server"
      #dspace__P__ui__P__url: "${DSPACE_UI_PROTO:-http}://${DSPACE_UI_HOST:-localhost}:${DSPACE_UI_PORT:-4000}"
      dspace__P__name: "DSpace ${COMPOSE_PROJECT_NAME} Started with Docker Compose"
      # db.url: Ensure we are using the 'dspacedb' image for our database
      # Note: Port is the internal (target) port
      db__P__url: "jdbc:postgresql://${COMPOSE_PROJECT_NAME}_dspacedb:5432/dspace"
      # solr.server: Ensure we are using the 'dspacesolr' image for Solr.
      # Note: Port here is the internal (target) port
      solr__P__server: "http://${COMPOSE_PROJECT_NAME}_dspacesolr:8983/solr"
      # proxies.trusted.ipranges: This setting is required for a REST API running in Docker to trust requests
      # from the host machine. This IP range MUST correspond to the 'dspacenet' subnet defined above.
      proxies__P__trusted__P__ipranges: "${DSPACE_NETWORK_ID:-172.23.0}"
      LOGGING_CONFIG: /dspace/config/log4j2-container.xml
    image: "${DOCKER_OWNER:-dspace}/dspace:${DSPACE_VER:-latest-test}"
    build:
      context: .
      dockerfile: Dockerfile.test
    depends_on:
    - dspacedb
    networks:
      dspacenet:
    ports:
    - published: "${DSPACE_REST_PORT:-8080}"
      target: 8080
    stdin_open: true
    tty: true
    volumes:
    # Keep DSpace assetstore directory between reboots
    - assetstore:/dspace/assetstore
    # Mount local [src]/dspace/config/ to container. This syncs your local configs with container
    # NOTE: Environment variables specified above will OVERRIDE any configs in local.cfg or dspace.cfg
    - ./dspace/config:/dspace/config
    # Ensure that the database is ready BEFORE starting tomcat
    # 1. While a TCP connection to dspacedb port 5432 is not available, continue to sleep
    # 2. Then, run database migration to init database tables
    # 3. Finally, start DSpace
    entrypoint:
    - /bin/bash
    - '-c'
    - |
      export dspace__P__server__P__url=$DSPACE_REST_URL
      export dspace__P__ui__P__url=$DSPACE_UI_URL
      while (!</dev/tcp/dspacedb/5432) > /dev/null 2>&1; do sleep 1; done;
      /dspace/bin/dspace database migrate
      java -jar /dspace/webapps/server-boot.jar --dspace.dir=/dspace
  # DSpace PostgreSQL database container
  dspacedb:
    container_name: "${COMPOSE_PROJECT_NAME}_dspacedb"
    #hostname: "${COMPOSE_PROJECT_NAME}_dspacedb"
    # Uses a custom Postgres image with pgcrypto installed
    image: "${DOCKER_OWNER:-dspace}/dspace-postgres-pgcrypto:${DSPACE_VER:-latest}"
    build:
      # Must build out of subdirectory to have access to install script for pgcrypto
      context: ./dspace/src/main/docker/dspace-postgres-pgcrypto/
    environment:
      PGDATA: /pgdata
      POSTGRES_PASSWORD: dspace
    networks:
      dspacenet:
    ports:
    - published: "${DSPACE_DB_PORT:-5432}"
      target: 5432
    stdin_open: true
    tty: true
    volumes:
    # Keep Postgres data directory between reboots
    - pgdata:/pgdata
  # DSpace Solr container
  dspacesolr:
    container_name: "${COMPOSE_PROJECT_NAME}_dspacesolr"
    #hostname: "${COMPOSE_PROJECT_NAME}_dspacesolr"
    image: "${DOCKER_OWNER:-dspace}/dspace-solr:${DSPACE_VER:-latest}"
    build:
      context: ./dspace/src/main/docker/dspace-solr/
      # Provide path to Solr configs necessary to build Docker image
      additional_contexts:
        solrconfigs: ./dspace/solr/
      args:
        SOLR_VERSION: "${SOLR_VER:-8.11}"
    networks:
      dspacenet:
    ports:
    - published: "${DSPACE_SOLR_PORT:-8983}"
      target: 8983
    stdin_open: true
    tty: true
    working_dir: /var/solr/data
    volumes:
    # Keep Solr data directory between reboots
    - solr_data:/var/solr/data
    # Initialize all DSpace Solr cores then start Solr:
    # * First, run precreate-core to create the core (if it doesn't yet exist). If exists already, this is a no-op
    # * Second, copy configsets to this core:
    #   Updates to Solr configs require the container to be rebuilt/restarted: `docker compose -p d7 up -d --build dspacesolr`
    entrypoint:
    - /bin/bash
    - '-c'
    - |
      init-var-solr
      precreate-core authority /opt/solr/server/solr/configsets/authority
      cp -r /opt/solr/server/solr/configsets/authority/* authority
      precreate-core oai /opt/solr/server/solr/configsets/oai
      cp -r /opt/solr/server/solr/configsets/oai/* oai
      precreate-core search /opt/solr/server/solr/configsets/search
      cp -r /opt/solr/server/solr/configsets/search/* search
      precreate-core statistics /opt/solr/server/solr/configsets/statistics
      cp -r /opt/solr/server/solr/configsets/statistics/* statistics
      precreate-core qaevent /opt/solr/server/solr/configsets/qaevent
      cp -r /opt/solr/server/solr/configsets/qaevent/* qaevent
      precreate-core suggestion /opt/solr/server/solr/configsets/suggestion
      cp -r /opt/solr/server/solr/configsets/suggestion/* suggestion
      exec solr -f
volumes:
  assetstore:
  pgdata:
  solr_data:
